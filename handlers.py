from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.filters import CommandObject
from init import *
from parsenew import *
from decorate import *


# A lot functions


@dp.message(Command(commands=["help"]))
async def command_help_handler(message: Message) -> None:
    """
    This handler receive messages with `/help` command and helps you to navigate
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Ç–≤–æ–µ —Ä–∞—Å–ø–∏–∞–Ω–∏–µ –≤ —É–Ω–∏–∫—É–º–µ!\
    \n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\
    \n/start - –ü–æ–∑–¥–∞—Ä–æ–≤–∞—Ç—å—Å—è\
    \n/set - –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É\
    \n/help - –í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏\
    \n/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\
    \n/coming - –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è")


@dp.message(Command(commands=['start']))
async def command_start_handler(message: Message) -> None:
    """
    This handler receive messages with `/start` command and start talk with you
    """
    your_name = message.from_user.full_name
    if not database.about_user(message.chat.id):
        database.new_user(message.chat.id)
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π' –±–æ—Ç –æ—Ç —É–Ω–∏–∫—É–º–∞, —á—Ç–æ-–±—ã —Ç—ã –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª —Å–≤–æ–µ —Ä–∞—Å–ø–∏–∞–Ω–∏–µ–º, –¥–∞–≤–∞–π —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\
        \n–ß—Ç–æ-–±—ã –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞–ø–∏—à–∏ /set, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /set –æ–ø—è—Ç—å!")
    else:
        await message.answer(f"–ú—ã –≤—Ä–æ–¥–µ –∑–Ω–∞–∫–æ–º—ã, —Ç—ã –∂–µ {your_name}? –Ø —Ç–µ–±—è –ø–æ–º–Ω—é, –∞ –≤–æ—Ç —Ç—ã –ø–æ–º–Ω–∏—à—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —É–Ω–∏–∫—É–º–∞?\
        \n–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /today –∏–ª–∏ /coming.")


@dp.message(Command(commands=['set']))
async def command_settings_handler(message: Message, command: CommandObject) -> None:
    """
    This handler receive messages with `/set` command and let you choose your group
    """
    if not command.args:
        await message.answer("–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∂–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!\n–ù–∞ –ø—Ä–∏–º–µ—Ä —Ç–∞–∫ - /set –ò–ò-82.")
    else:
        if not database.about_user(message.chat.id)[0][1]:
            await message.answer(f"–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ - {command.args}. ü•≥")
            database.update_info(message.chat.id, party=command.args)
        else:
            cur_grp = database.about_user(message.chat.id)[0][1]
            if cur_grp == command.args:
                await message.answer(f"–Ø –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—É, —Ç—ã –º–Ω–µ —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª. üòâ")
            else:
                await message.answer(f"–£ —Ç–µ–±—è —É–∂–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ - {cur_grp}, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –ø–µ—Ä–µ—à–µ–ª –≤ {command.args}. ü•≥")
                database.update_info(message.chat.id, party=command.args)


@dp.message(Command(commands=['groups']))
async def command_groups_handler(message: Message, command: CommandObject) -> None:
    """
    This handler receive messages with `/groups` command and gives you a list of groups for your organization
    """
    your_name = message.from_user.full_name
    if not command.args:
        await message.answer("–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∂–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!\n–ù–∞ –ø—Ä–∏–º–µ—Ä —Ç–∞–∫ - /groups –£–Ω–∏–∫–£–º –∏–ª–∏ /groups –ö—É–∑–ì–¢–£.")
    elif command.args in ORGANIZATIONS:
        await message.answer(await get_groups(command.args))
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏, {your_name}, —è –∑–Ω–∞—é –ª–∏—à—å –æ –≥—Ä—É–ø–ø–∞—Ö –ö—É–∑–ì–¢–£ –∏ –£–Ω–∏–∫–£–º.")


@dp.message(Command(commands=['today']))
async def command_today_schedule_handler(message: Message) -> None:
    """
    This handler receive messages with `/today` command and tell you your lessons for today or says you are free now
    """
    your_name = message.from_user.full_name
    if not database.about_user(message.chat.id)[0][1]:
        await message.answer(f"{your_name}, —É —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω –≥—Ä—É–ø–ø–∞. üßê\
        \n–í—ã–±–µ—Ä–∏ –µ–µ —Å –ø–æ–º–æ—â—å—é /set!")
    else:
        pari_info = await get_lessons(database.about_user(message.chat.id)[0][1], 'tooday')

        if pari_info:
            await message.answer(create_beautiful_table(pari_info, 'tooday'), parse_mode='Markdown')
        else:
            await message.answer("–£ —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä! üò¥")


@dp.message(Command(commands=['coming']))
async def command_coming_lessons_handler(message: Message) -> None:
    """
    This handler receive messages with `/coming` command and tell you about your closest lessons
    """
    your_name = message.from_user.full_name
    if not database.about_user(message.chat.id)[0][1]:
        await message.answer(f"{your_name}, —É —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω –≥—Ä—É–ø–ø–∞. üßê\
                \n–í—ã–±–µ—Ä–∏ –µ–µ —Å –ø–æ–º–æ—â—å—é /set!")
    else:
        pari_info = await get_lessons(database.about_user(message.chat.id)[0][1], 'coming')
        if pari_info:
            await message.answer(create_beautiful_table(pari_info, 'coming'), parse_mode='Markdown')
        else:
            await message.answer(f'–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, {your_name}, –Ω–æ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. üò¥')


@dp.message(Command(commands=['week']))
async def command_week_schedule_handler(message: Message) -> None:
    """
    This handler receive messages with `/week` command and tell you your week schedule
    """
    your_name = message.from_user.full_name
    if not database.about_user(message.chat.id)[0][1]:
        await message.answer(f"{your_name}, —É —Ç–µ–±—è –Ω–µ –≤—ã–±—Ä–∞–Ω –≥—Ä—É–ø–ø–∞. üßê\
                \n–í—ã–±–µ—Ä–∏ –µ–µ —Å –ø–æ–º–æ—â—å—é /set!")
    else:
        pari_info = await get_lessons(database.about_user(message.chat.id)[0][1], 'week')
        if pari_info:
            await message.answer(create_beautiful_table(pari_info, 'week'), parse_mode='Markdown')
        else:
            await message.answer(f'–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, {your_name}, –Ω–æ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. üò¥')


@dp.message()
async def default_handler(message: types.Message) -> None:
    """
    This handler receive all over messages
    """
    await message.answer(f'–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. üò∞\
    \n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ-–±—ã –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π!\
    \n–ß—Ç–æ-–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞–ø–∏—à–∏ /help.')
